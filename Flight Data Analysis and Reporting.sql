/* IMPORTANT INSTRUCTIONS FOR LEARNERS
1) DO NOT CHANGE THE ORDER OF COLUMNS.
2) YOUR QUERY SHOULD DISPLAY COLUMNS IN THE SAME ORDER AS MENTIONED IN ALL QUESTIONS.
3) YOU CAN FIND THE ORDER OF COLUMNS IN QUESTION TEMPLATE SECTION OF EACH QUESTION.
4) USE ALIASING AS MENTIONED IN QUESTION TEMPLATE FOR ALL COLUMNS
5) DO NOT CHANGE COLUMN NAMES*/
                 
-- Question 1 (Marks: 3)
-- Objective: Determine, for flights that actually departed later than scheduled, what the average departure delay is (in minutes).
-- Calculate the Average Delay in Departures for Delayed Flights
-- Question Template: Display following columns flight_id, flight_no, departure_delay_minutes

SELECT
    f.flight_id AS "flight_id",
    f.flight_no AS "flight_no",
    ROUND(AVG(TIMESTAMPDIFF(MINUTE, scheduled_departure, actual_departure)), 2) AS "departure_delay_minutes"
FROM 
    flights AS f
WHERE 
    f.actual_departure > f.scheduled_departure
    AND f.scheduled_departure IS NOT NULL
    AND f.actual_departure IS NOT NULL
    GROUP BY 
    flight_id, flight_no;

-- Question 2 (Marks: 3)
-- Objective: Show how frequently each aircraft is used by counting the number of flights operated by each aircraft.
-- List Flights Grouped by Aircraft to See Usage Frequency
-- Question Template: Display following columns aircraft_code, total_flights, avg_flight_duration_minutes

SELECT
    f.aircraft_code AS "aircraft_code",
    COUNT(*) AS "total_flights",
    ROUND(AVG(TIMESTAMPDIFF(MINUTE, f.scheduled_departure, f.scheduled_arrival)), 2) AS "avg_flight_duration_minutes"
FROM 
    flights AS f
WHERE 
    f.scheduled_departure IS NOT NULL 
    AND f.scheduled_arrival IS NOT NULL
GROUP BY 
    f.aircraft_code
ORDER BY 
    total_flights DESC;

-- Question 3 (Marks: 3)
-- Objective: Aggregate the total revenue generated by each flight by summing up the fare amounts from the ticket_flights table.
-- Calculate Total Revenue per Flight from the Ticket_Flights Table
-- Question Template: Display following columns flight_id, flight_no, total_revenue

SELECT 
    tf.flight_id AS flight_id,
    f.flight_no AS flight_no,
    SUM(tf.amount) AS total_revenue
FROM 
    ticket_flights AS tf
INNER JOIN 
    flights AS f ON tf.flight_id = f.flight_id
GROUP BY 
    tf.flight_id, f.flight_no
ORDER BY 
    total_revenue DESC;

-- Question 4 (Marks: 3)
-- Objective: Examine boarding pass data to identify how passengers are being boarded by calculating the average boarding number per flight.
-- Analyze Boarding Numbers per Flight to Detect Patterns in Boarding Pass Allocation
-- Question Template: Display following columns flight_id, avg_boarding_no, total_boarding_passes

SELECT 
    bp.flight_id AS flight_id,
    AVG(bp.boarding_no) AS avg_boarding_no,
    COUNT(bp.boarding_no) AS total_boarding_passes
FROM 
    boarding_passes AS bp
GROUP BY 
    bp.flight_id
ORDER BY 
    avg_boarding_no DESC;

-- Question 5 (Marks: 7)
-- Objective: Identify seat occupancy by comparing the number of boarding passes (occupied seats) to the total seats available on an aircraft, and consider the fare conditions for those seats.
-- Determine Occupancy and Fare Conditions per Aircraft
-- Question Template: Display following columns flight_id, flight_no, aircraft_code, occupied_seats, occupancy_rate_percentage

SELECT 
    f.flight_id AS flight_id,
    f.flight_no AS flight_no,
    f.aircraft_code AS aircraft_code,
    COUNT(bp.boarding_no) AS occupied_seats,
    ROUND((COUNT(bp.boarding_no) / s.total_seats) * 100, 2) AS occupancy_rate_percentage
FROM 
    flights AS f
INNER JOIN 
    boarding_passes AS bp ON f.flight_id = bp.flight_id
INNER JOIN (
    SELECT 
        aircraft_code,
        COUNT(*) AS total_seats
    FROM 
        seats
    GROUP BY 
        aircraft_code
) AS s ON f.aircraft_code = s.aircraft_code
GROUP BY 
    f.flight_id, f.flight_no, f.aircraft_code, s.total_seats
ORDER BY 
    occupancy_rate_percentage DESC;

-- Question 6 (Marks: 3)
-- Objective: Identify the three flights that generated the highest revenue based on ticket sales.
-- Top 3 Flights by Revenue
-- Question Template: Display following columns flight_id, flight_no, total_revenue

SELECT 
    tf.flight_id AS flight_id,
    f.flight_no AS flight_no,
    SUM(tf.amount) AS total_revenue
FROM 
    ticket_flights AS tf
INNER JOIN 
    flights AS f ON tf.flight_id = f.flight_id
GROUP BY 
    tf.flight_id, f.flight_no
ORDER BY 
    total_revenue DESC
LIMIT 3;

-- Question 7 (Marks: 3)
-- Objective: Determine the average flight duration for each aircraft model, allowing you to see how flight performance might vary between different models.
-- Average Flight Duration by Aircraft Model
-- Question Template: Display following columns model, avg_duration_minutes

SELECT 
    a.model AS model,
    ROUND(AVG(TIMESTAMPDIFF(MINUTE, f.scheduled_departure, f.scheduled_arrival)), 2) AS avg_duration_minutes
FROM 
    flights AS f
JOIN 
    aircrafts AS a ON f.aircraft_code = a.aircraft_code
WHERE 
    f.scheduled_departure AND f.scheduled_arrival
GROUP BY 
    a.model
ORDER BY 
    avg_duration_minutes DESC;

-- Question 8 (Marks: 2)
-- Objective: Count how many flights depart from each airport to assess airport activity levels.
-- Flight Count per Airport (Departure)
-- Question Template: Display following columns departure_airport, departure_flights

SELECT 
    f.departure_airport AS departure_airport,
    COUNT(*) AS departure_flights
FROM 
    flights AS f
WHERE 
    f.departure_airport IS NOT NULL
GROUP BY 
    f.departure_airport
ORDER BY 
    departure_flights DESC;

-- Question 9 (Marks: 2)
-- Objective: Count how many flights depart from and arrive at each airport to assess airport activity levels.
-- Flight Count per Airport (Arrival)
-- Question Template: Display following columns arrival_airport, arrival_flights

SELECT 
    f.arrival_airport AS arrival_airport,
    COUNT(*) AS arrival_flights
FROM 
    flights AS f
WHERE 
    f.arrival_airport IS NOT NULL
GROUP BY 
    f.arrival_airport
ORDER BY 
    arrival_flights DESC;

-- Question 10 (Marks: 3)
-- Objective: Analyze trends in bookings over time by grouping bookings by date, counting total bookings, and summing up the revenue.
-- Daily Booking Trends
-- Question Template: Display following columns booking_date, total_bookings, total_revenue

SELECT 
    DATE(b.book_date) AS booking_date,
    COUNT(*) AS total_bookings,
    SUM(b.total_amount) AS total_revenue
FROM 
    bookings AS b
WHERE 
    b.book_date IS NOT NULL
GROUP BY 
    DATE(b.book_date)
ORDER BY 
    booking_date;

-- Question 11 (Marks: 3)
-- Objective: Identify the most common routes by counting the number of flights for each departureâ€“arrival airport pair.
-- Frequent Routes Analysis
-- Question Template: Display following columns departure_airport, arrival_airports, flights_count

SELECT 
    f.departure_airport,
    f.arrival_airport,
    COUNT(*) AS flights_count
FROM 
    flights AS f
GROUP BY 
    f.departure_airport, f.arrival_airport
ORDER BY 
    flights_count DESC;

-- Question 12 (Marks: 3)
-- Objective: Determine how many passengers boarded each flight by counting the boarding passes issued.
-- Passenger Boarding Summary per Flight
-- Question Template: Display following columns flight_id, passengers_boarded

SELECT 
    bp.flight_id,
    COUNT(bp.boarding_no) AS passengers_boarded
FROM 
    boarding_passes AS bp
GROUP BY 
    bp.flight_id
ORDER BY 
    passengers_boarded DESC;

-- Question 13 (Marks: 3)
-- Objective: Assess the boarding process by calculating the average boarding order number for each flight, which may indicate the boarding strategy or sequence.
-- Average Boarding Number per Flight
-- Question Template: Display following columns flight_id, avg_boarding_no

SELECT 
    bp.flight_id,
    ROUND(AVG(bp.boarding_no), 2) AS avg_boarding_no
FROM 
    boarding_passes AS bp
GROUP BY 
    bp.flight_id
ORDER BY 
    avg_boarding_no DESC;

-- Question 14 (Marks: 7)
-- Objective: Measure the seat occupancy rate for each flight by comparing the number of boarding passes issued with the total seats available on the aircraft.
-- Seat Occupancy Rate per Flight
-- Question Template: Display following columns flight_id, flight_no, occupied_seats, occupany_rate_percentage

SELECT 
    f.flight_id,
    f.flight_no,
    COUNT(DISTINCT bp.boarding_no) AS occupied_seats,
    ROUND((COUNT(DISTINCT bp.boarding_no) / COUNT(DISTINCT s.seat_no)) * 100, 2) AS occupancy_rate_percentage
FROM 
    flights AS f
INNER JOIN 
    boarding_passes AS bp ON f.flight_id = bp.flight_id
INNER JOIN 
    seats AS s ON f.aircraft_code = s.aircraft_code
GROUP BY 
    f.flight_id, f.flight_no;

-- Question 15 (Marks: 3)
-- Objective: Aggregate the total amount spent by each passenger across all their tickets by joining the tickets and ticket_flights tables.
-- Total Spend per Passenger
-- Question Template: Display following columns passenger_id, total_tickets, total_spent

SELECT 
    t.passenger_id,
    COUNT(DISTINCT t.ticket_no) AS total_tickets,
    SUM(tf.amount) AS total_spent
FROM 
    tickets AS t
INNER JOIN 
    ticket_flights AS tf ON t.ticket_no = tf.ticket_no
GROUP BY 
    t.passenger_id
ORDER BY 
    total_spent DESC;


